version: '3'
services:
  manager:
    build:
      context: ./manager
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    expose:
      - "8081"
    environment:
      - MANAGER_SERVICE_PORT=8081
      - COUNT_WORKERS=2
      - MONGO_URI=mongo:27017,mongodb_secondary_1:27017,mongodb_secondary_2:27017/crack_db?replicaSet=rs0
      - RABBIT_HOST=rabbitmq
    depends_on:
      mongo:
        condition:  service_healthy
      mongodb_secondary_1:
        condition:  service_healthy
      mongodb_secondary_2:
        condition:  service_healthy
      rabbitmq:
        condition:  service_healthy
    networks:
      - my-network

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 2
    depends_on:
      rabbitmq:
        condition:  service_healthy
    environment:
      - RABBIT_HOST=rabbitmq
    networks:
      - my-network

  rabbitmq:
    image: rabbitmq:latest
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
      RABBITMQ_DEFAULT_VHOST: /
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics check_running"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - my-network

  mongo:
    image: mongo:4.4
    command: bash -c "mongod --replSet rs0 --bind_ip_all && /scripts/init.sh"
    ports:
      - "27017:27017"
    restart: always
    links:
      - mongodb_secondary_1
      - mongodb_secondary_2
    volumes:
      - ~/mongors/data1:/data/db
      - ./init.sh:/scripts/init.sh
    healthcheck:
      test:  ["CMD", "mongo", "--eval", "'quit(db.getSiblingDB(\"admin\").runCommand({replSetGetStatus: 1}).myState == 1 ? 0 : 1)'"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - my-network

  mongodb_secondary_1:
    image: mongo:4.4
    container_name: mongodb_secondary_1
    restart: always
    command: mongod --bind_ip_all --replSet rs0
    volumes:
      - ~/mongors/data2:/data/db
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "'quit(db.getSiblingDB(\"admin\").runCommand({replSetGetStatus: 1}).myState == 2 ? 0 : 1)'" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - my-network

  mongodb_secondary_2:
    image: mongo:4.4
    container_name: mongodb_secondary_2
    restart: always
    command: mongod --bind_ip_all --replSet rs0
    volumes:
      - ~/mongors/data3:/data/db
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "'quit(db.getSiblingDB(\"admin\").runCommand({replSetGetStatus: 1}).myState == 2 ? 0 : 1)'" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - my-network

networks:
  my-network:
    driver: bridge

volumes:
  mongo_data: